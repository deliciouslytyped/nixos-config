#! /usr/bin/env bash
set -euo pipefail
set -x

#Load lib.sh functions
. "$(dirname "$(realpath "${BASH_SOURCE[0]}")")"/lib.sh

#TODO "--impure" option or something for speeeeed
#TODO permanent system worktree so dont have to wait for recheckout

#TODO shellcheck
#TODO add branch flags
#TODO channel enumeration?
# qyliss(){
#
#   #! /usr/bin/env bash
#
#   #TODO <qyliss> I could have activate use the local tree if I wanted to
#   #<qyliss> that would be fine
#   #<qyliss> It just can't rely on my normal NIX_PATH that points into the store
#
#   # IMPORTANT: Don't use nix-shell shebang!
#   # If a config has generated an invalid NIX_PATH, it still needs to be
#   # possible to rescue the system by activating a different configuration.
#
#   #TODO
#   }

make_system_config(){
  #TODO warn if branch worktree contains uncomitted changes using git worktree list
  git merge -X theirs --allow-unrelated-histories --no-edit "$CONFIGURATION_BRANCH" || true #TODO temporary hacks in case no changes
  git subtree merge --squash --prefix "channels" "$CHANNELS_BRANCH" || true #TODO figure out how to --no-edit
  }

build_system(){
  #TODO speedhack
  local retVal=$SYSBRANCHDIR
  # new_temp_worktree "$SYSTEM_BRANCH"
  # #TODO make it possible to disable trap, alternatively, prompty y/N to leave around worktree
  # trap 'close_temp_worktree "$retVal"' EXIT #TODO not sure if the quoting is correct here # redsymbol.net/articles/unofficial-bash-strict-mode/#essential-cleanup redsymbol.net/articles/bash-exit-traps/ https://stackoverflow.com/questions/9504662/trap-function-by-passing-arguments
  pushd "$retVal"

  make_system_config

  #TODO man its pretty awkward that you have to wait for a checkout for it to fail with this, and if the merge happens afterwards which is a corner case for missing the file in the list
  if [ "$#" -eq 0 ]; then
      echo -e "\e[31;1merror:\e[0m must specify a system definition" >&2
      echo "Available system definitions are:" >&2
      find "$retVal"/nodes/*/ -maxdepth 1 -name 'configuration.nix' | awk -F / '{print "- " $(NF-1)}' | sed 's/\.nix$//' >&2
      exit 1
  fi

  actually_build "$retVal" "$@"

  popd
  # close_temp_worktree "$retVal"
  # trap - EXIT
  }

find_private(){
  "$script_dir/find.sh"
  }

#TODO why is this so slow and no output??
#TODO something is super fucky about how tihs stuff works
actually_build(){
  local unstable="channels/nixos-unstable-=-=-nixpkgs-channels" #TODO fix the path hacks in bootstrap
  local stable=channel:nixos-unstable
  # stable="channels/$NIXOS_CURRENT-=-=-nixpkgs-channels"
  local d="$1"
  local sys="$2"
  shift
  shift

  local link
  link="$(mktemp -d -t "buildsys.XXXXXXXX")/result"
  NIX_PATH="unstable=$unstable:nixpkgs=$stable:nixos-config=$d/nodes/$sys/configuration.nix:$d" \
    PRIVATE="$(find_private)" \
    nix build --show-trace -v -f '<nixpkgs/nixos>' --out-link "$link" "$@" vm
  }

activate(){
  local path
  path="$(readlink "$link")"
  echo "$path"
  nix-env -p /nix/var/nix/profiles/system --set "$path"
  exec "$path/bin/switch-to-configuration" boot
  }

script_dir=$(realpath "$(dirname "$0")")
build_system "$@"
#qyliss "$@"
